<?xml version="1.0" encoding="UTF-8"?>
<project name="MyCompanySite" default="build-app" basedir="."
	xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors">
	
	<!-- import the ant / maven integration tasks -->
	<path id="maven-ant-tasks.classpath" path="../lib/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
	
	<property name="project.root" location="../"/>
	
	<property file="../build.properties"/>

	<target name="jetty-demo" depends="start-db">
		<delete dir="war/WEB-INF/lib"/>
		<artifact:mvn mavenHome="${maven.home}" fork="true" jvmargs="-XX:MaxPermSize=256M -Xmx512M">
			<arg value="compile"/>
			<arg value="war:exploded"/>
			<arg value="jetty:run"/>
		</artifact:mvn>
	</target>

	<target name="jetty-debug" depends="start-db">
		<delete dir="war/WEB-INF/lib"/>
		<artifact:mvn mavenHome="${maven.home}" fork="true" jvmargs="-XX:MaxPermSize=256M -Xmx512M -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000">
			<arg value="compile"/>
			<arg value="war:exploded"/>
			<arg value="jetty:run"/>
		</artifact:mvn>
	</target>

    <target name="jetty-demo-jrebel" depends="start-db">
		<delete dir="war/WEB-INF/lib"/>
		<artifact:mvn mavenHome="${maven.home}" fork="true" jvmargs="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -XX:MaxPermSize=256M -Xmx512M -Drebel.root=${project.root} -Dlogs.dir=${logs.dir} -noverify -javaagent:${jrebel.path}">
			<arg value="compile"/>
			<arg value="war:exploded"/>
			<arg value="jetty:run"/>
		</artifact:mvn>
	</target>

	<target name="jetty-demo-yourkit">
		<delete dir="war/WEB-INF/lib"/>
		<artifact:mvn mavenHome="${maven.home}" fork="true" jvmargs="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -XX:MaxPermSize=256M -Xmx512M -agentpath:${yourkit.agent.path}libyjpagent.jnilib=builtinprobes=none,delay=10000,sessionname=Jetty">
			<arg value="compile"/>
			<arg value="war:exploded"/>
			<arg value="jetty:run"/>
		</artifact:mvn>
	</target>

    <target name="jetty-demo-jrebel-yourkit">
		<delete dir="war/WEB-INF/lib"/>
		<artifact:mvn mavenHome="${maven.home}" fork="true" jvmargs="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -XX:MaxPermSize=256M -Xmx512M -Drebel.root=${project.root} -Dlogs.dir=${logs.dir} -noverify -javaagent:${jrebel.path} -agentpath:${yourkit.agent.path}libyjpagent.jnilib=builtinprobes=none,delay=10000,sessionname=Jetty">
			<arg value="compile"/>
			<arg value="war:exploded"/>
			<arg value="jetty:run"/>
		</artifact:mvn>
	</target>
	
	<target name="jetty-stop">
		<artifact:mvn mavenHome="${maven.home}" fork="true" jvmargs="-XX:MaxPermSize=256M -Xmx512M">
			<arg value="jetty:stop"/>
		</artifact:mvn>
	</target>
	
	<!-- Project Reference Targets -->
	<!-- build the application and create the war artifact -->
	<target name="build-app">
		<delete dir="war/WEB-INF/lib"/>
		<artifact:mvn mavenHome="${maven.home}" fork="true">
			<arg value="-Dmaven.test.skip=true"/>
			<arg value="install"/>
		</artifact:mvn>
	</target>

    <target name="start-db">
        <!-- retrieve the web project pom file and import its jar dependencies -->
        <artifact:pom id="warPom" file="pom.xml"/>
        <artifact:dependencies filesetId="warDeps" pomRefId="warPom" useScope="test" />
        <path id="build.runtime.classpath">
            <fileset refid="warDeps"/>
        </path>

        <echo message="Starting Data Base..." />
        <java fork="true"  spawn="true" classname="org.hsqldb.Server" classpathref="build.runtime.classpath">
            <arg  line="-database.0 file:data/broadleaf -dbname.0 broadleaf"/>
        </java>
    </target>

    <target name="stop-db">
        <echo message="Execute SQL on new Data Base..." />
        <artifact:pom id="warPom" file="pom.xml"/>
        <artifact:dependencies filesetId="warDeps" pomRefId="warPom" useScope="test" />
        <path id="build.runtime.classpath">
            <fileset refid="warDeps"/>
        </path>
        <sql
            autocommit="true"
            print="true"
            classpathref="build.runtime.classpath"
            driver="org.hsqldb.jdbcDriver"
            url="jdbc:hsqldb:hsql://localhost/broadleaf;ifexists=true"
            userid="sa"
            password="">
            <transaction>SHUTDOWN</transaction>
        </sql>
        <echo message="SQL Executed on data base..." />
    </target>

    <target name="build-sql">
        <!--
            You will need to run a mvn install on your project before attempting to execute this task.
            Also, you will likely need to assign additional heap space to your ANT process. A setting
            of -XX:MaxPermSize=256M -Xmx512M should be sufficient.
        -->
        <mkdir dir="target/sql"/>
        <artifact:pom id="myPom" file="pom.xml" />
        <artifact:dependencies filesetId="pomDeps" pomRefId="myPom" useScope="compile" />
        <property name="baseTarget" location="target/${myPom.build.finalName}/WEB-INF"/>
        <fileset id="libDir" dir="${baseTarget}/lib"/>
        <path id="build.runtime.classpath">
            <!--There are some additional libraries needed at compile time that are not included
                in WEB-INF/lib - find those libraries via a difference algorithm-->
            <restrict>
                <difference>
                    <fileset refid="pomDeps" />
                    <intersect>
                        <fileset refid="pomDeps" />
                        <fileset refid="libDir" />
                    </intersect>
                </difference>
                <rsel:not>
                    <rsel:name name="**/*.pom" />
                </rsel:not>
            </restrict>
            <!--Add the lib directory to get all the dependencies required for the demo app-->
            <fileset refid="libDir"/>
            <!--Add the classes directory in the war project, if required-->
            <!--<pathelement location="${baseTarget}/classes"/>-->
        </path>
        <!--If the war project does not contain custom entities (best practice), then it is not necessary to include application context from the WEB-INF directory-->
        <!--<property name="my.app.context" location="src/main/webapp/WEB-INF/applicationContext.xml"/>-->
        <taskdef name="hibernatetool" classname="org.broadleafcommerce.common.util.sql.HibernateToolTask" classpathref="build.runtime.classpath" />
        <hibernatetool destDir="target/sql" combinePersistenceUnits="false" refineFileNames="true">
            <!--add in additional persistence configuration related to the admin -->
            <classPathApplicationContext path="bl-open-admin-contentClient-applicationContext.xml"/>
            <!--add in additional persistence configuration related to the cms -->
            <classPathApplicationContext path="bl-cms-contentClient-applicationContext.xml"/>
            <!--add in additional persistence configuration for our core -->
            <classPathApplicationContext path="mycompany-applicationContext.xml"/>
            <!--see description for my.app.context above -->
            <!--<fileSystemApplicationContext path="${my.app.context}"/>-->
            <!--select the dialects and persistence units to export-->
            <jpaconfiguration persistenceUnit="blPU" dialect="org.hibernate.dialect.HSQLDialect" />
            <jpaconfiguration persistenceUnit="blSecurePU" dialect="org.hibernate.dialect.HSQLDialect" />
            <jpaconfiguration persistenceUnit="blCMSStorage" dialect="org.hibernate.dialect.HSQLDialect" />
            <!--other required elements-->
            <classpath refid="build.runtime.classpath" />
            <hbm2ddl export="false"/>
        </hibernatetool>
    </target>

</project>